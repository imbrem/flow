WIDTH=16;
DEPTH=65536;

ADDRESS_RADIX=HEX;
DATA_RADIX=HEX;

CONTENT BEGIN
	-- __start: Jump to MAIN
	00000  :   E073;
	00001  :   0833;
	00002  :   D030;
	00003  :   0000;
	00004  :   0000;
	00005  :   0000;
	00006  :   0000;
	00007  :   00EC; -- MAIN - 1

  00008  :   0002;
	00009  :   0003;
	0000A  :   0101;
	0000B  :   0104;
	0000C  :   0201;
	0000D  :   0204;
	0000E  :   0301;
	0000F  :   0304;
	00010  :   0402;
	00011  :   0403;
	00012  :   8000;

  00013  :   0004;
  00014  :   0103;
  00015  :   0104;
  00016  :   0204;
  00017  :   0304;
  00018  :   0404;
  00019  :   8000;

  0001A  :   0001;
  0001B  :   0002;
  0001C  :   0003;
  0001D  :   0104;
  0001E  :   0202;
  0001F  :   0203;
  00020  :   0301;
  00021  :   0401;
  00022  :   0402;
  00023  :   0403;
  00024  :   0404;
  00025  :   8000;

  00026  :   0001;
  00027  :   0002;
  00028  :   0003;
  00029  :   0104;
  0002A  :   0201;
  0002B  :   0202;
  0002C  :   0203;
  0002D  :   0304;
  0002E  :   0401;
  0002F  :   0402;
  00030  :   0403;
  00031  :   8000;

  00032  :   0001;
  00033  :   0004;
  00034  :   0101;
  00035  :   0104;
  00036  :   0201;
  00037  :   0202;
  00038  :   0203;
  00039  :   0204;
  0003A  :   0304;
  0003B  :   0404;
  0003C  :   8000;

  0003D  :   0001;
  0003E  :   0002;
  0003F  :   0003;
  00040  :   0004;
  00041  :   0101;
  00042  :   0201;
  00043  :   0202;
  00044  :   0203;
  00045  :   0304;
  00046  :   0401;
  00047  :   0402;
  00048  :   0403;
  00049  :   8000;

  0004A  :   0002;
  0004B  :   0003;
  0004C  :   0101;
  0004D  :   0201;
  0004E  :   0202;
  0004F  :   0203;
  00050  :   0301;
  00051  :   0304;
  00052  :   0402;
  00053  :   0403;
  00054  :   8000;

  00055  :   0001;
  00056  :   0002;
  00057  :   0003;
  00058  :   0004;
  00059  :   0104;
  0005A  :   0203;
  0005B  :   0303;
  0005C  :   0402;
  0005D  :   8000;

  0005E  :   0002;
  0005F  :   0003;
  00060  :   0101;
  00061  :   0104;
  00062  :   0202;
  00063  :   0203;
  00064  :   0301;
  00065  :   0304;
  00066  :   0402;
  00067  :   0403;
  00068  :   8000;

  00069  :   0002;
  0006A  :   0003;
  0006B  :   0101;
  0006C  :   0104;
  0006D  :   0202;
  0006E  :   0203;
  0006F  :   0204;
  00070  :   0304;
  00071  :   0402;
  00072  :   0403;
  00073  :   8000;

  00074  :   0002;
  00075  :   0003;
  00076  :   0101;
  00077  :   0104;
  00078  :   0201;
  00079  :   0202;
  0007A  :   0203;
  0007B  :   0204;
  0007C  :   0301;
  0007D  :   0304;
  0007E  :   0401;
  0007F  :   0404;
  00080  :   8000;

  00081  :   0001;
  00082  :   0002;
  00083  :   0003;
  00084  :   0101;
  00085  :   0104;
  00086  :   0201;
  00087  :   0202;
  00088  :   0203;
  00089  :   0301;
  0008A  :   0304;
  0008B  :   0401;
  0008C  :   0402;
  0008D  :   0403;
  0008E  :   8000;

  0008F  :   0002;
  00090  :   0003;
  00091  :   0004;
  00092  :   0101;
  00093  :   0201;
  00094  :   0301;
  00095  :   0402;
  00096  :   0403;
  00097  :   0404;
  00098  :   8000;

  00099  :   0001;
  0009A  :   0002;
  0009B  :   0003;
  0009C  :   0101;
  0009D  :   0104;
  0009E  :   0201;
  0009F  :   0204;
  000A0  :   0301;
  000A1  :   0304;
  000A2  :   0401;
  000A3  :   0402;
  000A4  :   0403;
  000A5  :   8000;

  000A6  :   0001;
  000A7  :   0002;
  000A8  :   0003;
  000A9  :   0004;
  000AA  :   0101;
  000AB  :   0201;
  000AC  :   0202;
  000AD  :   0203;
  000AE  :   0204;
  000AF  :   0301;
  000B0  :   0401;
  000B1  :   0402;
  000B2  :   0403;
  000B3  :   0404;
  000B4  :   8000;

  000B5  :   0001;
  000B6  :   0002;
  000B7  :   0003;
  000B8  :   0004;
  000B9  :   0101;
  000BA  :   0201;
  000BB  :   0202;
  000BC  :   0203;
  000BD  :   0301;
  000BE  :   0401;
  000BF  :   8000;

  -- HEX_ARRAY: array of hexadecimal digits to display  =  00C0

  000C0  :   0008;
  000C1  :   0013;
  000C2  :   001A;
  000C3  :   0026;
  000C4  :   0032;
  000C5  :   003D;
  000C6  :   004A;
  000C7  :   0055;
  000C8  :   005E;
  000C9  :   0069;
  000CA  :   0074;
  000CB  :   0081;
  000CC  :   008F;
  000CD  :   0099;
  000CE  :   00A6;
  000CF  :   00B5;

  -- PRINT_LETTER (R8 = LETR, R6 = COLOR, R7 = POSITION)  =  00D0
  -- Prints a single sign-terminated letter stored in mem @ R8
  -- Clobbers R8, R9

  000D0  :   0889; -- R9 <- MEM[R8]
  000D1  :   F193; -- IF SIGN[9] RETURN NONE
  000D2  :   4799; -- VGA OFFSET R9 TO R4
  000D3  :   0269; -- DISPLAY PIXEL @ R9 with COLOR R6
  000D4  :   E018; -- R8++
  000D5  :   EFA0; -- GOTO 00D0

  -- PRINT_FIRST (R5 = DIGIT, R6 = COLOR, R7 = POSITION)  =  00D8
  -- Prints the first nybble of the hexadecimal number in R5
  -- Clobbers R8, R9, RA

  -- DATA:
  000D6  :   00C0; -- HEX_ARRAY
  000D7  :   00CF; -- PRINT_LETTER - 1

  -- PROGRAM:

  000D8  :   D05A; -- RA <- R5
  000D9  :   0000; -- NOOP (left in from before)
  000DA  :   DDCA; -- RA <- RA >> C
  000DB  :   D008; -- R8 <- R0
  000DC  :   EFB8; -- R8 <- R8 - 7
  000DD  :   0888; -- R8 <- HEX_ARRAY
  000DE  :   18A8; -- R8 <- R8 + RA
  000DF  :   0888; -- R8 <- HEX_ARRAY[RA]
  000E0  :   D00A; -- RA <- R0
  000E1  :   EF7A; -- RA <- RA - A
  000E2  :   08AA; -- RA <- PRINT_LETTER - 1
  000E3  :   E011; -- R1++
  000E4  :   0E31; -- STK[R1] <- R3
  000E5  :   D003; -- R3 <- R0
  000E6  :   E033; -- R3 <- R3 + 3
  000E7  :   D0A0; -- R0 <- RA
  000E8  :   0A13; -- R3 <- STK[R1]
	000E9  :   EFF1; -- R1--
	000EA  :   EFF3; -- R3--
	000EB  :   D030; -- R0 <- R3

	-- MAIN: get N, C, P from switches, call PRINT_NUMBER (in a loop)

	-- DATA:
	000EC  :   00F8; -- PRINT_NUMBER - 1

	-- PROGRAM:

	000ED  :   E023;
	000EE  :   D00A;
	000EF  :   EFEA;
	000F0  :   08AA;
	000F1  :   0300;
	000F2  :   010B;
	000F3  :   0300;
	000F4  :   0106;
	000F5  :   0300;
	000F6  :   0107;
	000F7  :   D0A0;

  -- PRINT_NUMBER (RB = NUMBER, R6 = COLOR, R7 = POSITION)
  -- Prints the hexadecimal number stored in RB
  -- Clobbers R5, R7, R8, R9, RA, RB, RC

  -- DATA:
	000F8  :   00D7; -- PRINT_FIRST - 1

  -- PROGRAM:
  000F9  :   D00C;
  000FA  :   EFFC;
  000FB  :   08CC; -- Load PRINT_FIRST - 1 to RC
  000FC  :   D0B5; -- Load RB to R5
  000FD  :   E011; -- R1++
  000FE  :   0E31; -- STK[R1] <- R3
  000FF  :   D003; -- Load R0 to R3
  00100  :   E033; -- R3 <- R3 + 3
  00101  :   D0C0; -- Call PRINT_FIRST

  00102  :   E057; -- Move number 5 to the left
	00103  :   DC4B; -- Shift left 4 bits
	00104  :   D0B5; -- Copy B to 5
  00105  :   D003; -- Load R0 to R3
  00106  :   E033; -- R3 <- R3 + 3
  00107  :   D0C0; -- Call PRINT_FIRST

  00108  :   E057; -- Move number 5 to the left
	00109  :   DC4B; -- Shift left 4 bits
	0010A  :   D0B5; -- Copy B to 5
  0010B :   D003; -- Load R0 to R3
  0010C  :   E033; -- R3 <- R3 + 3
  0010D  :   D0C0; -- Call PRINT_FIRST

  0010E  :   E057; -- Move number 5 to the left
	0010F  :   DC4B; -- Shift left 4 bits
	00110  :   D0B5; -- Copy B to 5
  00111  :   D003; -- Load R0 to R3
  00112  :   E033; -- R3 <- R3 + 3
  00113  :   D0C0; -- Call PRINT_FIRST

  00114  :   0A13; -- R3 <- STK[R1]
	00115  :   EFF1; -- R1--
  00116  :   EFF3; -- R3--
  00117  :   D030; -- RETURN


	[00118..0FFFF]  :   0000;
END;
